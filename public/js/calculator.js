/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calculator = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"block":4,"DOT":5,"EOF":6,"const_block":7,"var_block":8,"proc_block":9,"statement":10,"CONST":11,"assignment":12,"assigment_star":13,"SEMICOLON":14,"VAR":15,"id":16,"id_star":17,"PROCEDURE":18,"argument":19,"ASSIGN":20,"number":21,"COMMA":22,"ID":23,"LPAREN":24,"argument_star":25,"RPAREN":26,"NUMBER":27,"expression":28,"CALL":29,"BEGIN":30,"statement_plus":31,"END":32,"IF":33,"condition":34,"THEN":35,"ELSE":36,"WHILE":37,"DO":38,"condition_":39,"ODD":40,"COMPARISON":41,"term":42,"ADDMINUS":43,"factor":44,"MULDIV":45,"$accept":0,"$end":1},
terminals_: {2:"error",5:"DOT",6:"EOF",11:"CONST",14:"SEMICOLON",15:"VAR",18:"PROCEDURE",20:"ASSIGN",22:"COMMA",23:"ID",24:"LPAREN",26:"RPAREN",27:"NUMBER",29:"CALL",30:"BEGIN",32:"END",33:"IF",35:"THEN",36:"ELSE",37:"WHILE",38:"DO",40:"ODD",41:"COMPARISON",43:"ADDMINUS",45:"MULDIV"},
productions_: [0,[3,3],[4,4],[7,4],[7,0],[8,4],[8,0],[9,7],[9,0],[12,3],[13,3],[13,0],[16,1],[17,3],[17,0],[19,4],[19,0],[25,3],[25,0],[21,1],[10,3],[10,3],[10,4],[10,6],[10,4],[10,4],[31,3],[31,0],[34,1],[34,3],[39,2],[39,3],[28,1],[28,3],[42,1],[42,3],[44,1],[44,1],[44,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: 
      return $$[$0-2];
    
break;
case 2: 
      $$[$0-3] ? c = $$[$0-3] : c = 'NULL'
      $$[$0-2] ? v = $$[$0-2] : v = 'NULL'
      $$[$0-1] ? p = $$[$0-1] : p = 'NULL'

      this.$ = {
        typ: 'BLOCK',
        cte: c,
        var: v,
        prc: p,
        sta: $$[$0]
      }; 
    
break;
case 3:
      this.$ = [$$[$0-2]];
      if ($$[$0-1] && $$[$0-1].length > 0)
        this.$ = this.$.concat($$[$0-1]);
    
break;
case 5:
      this.$ = [{
        typ: 'VAR',
        val: $$[$0-2].val
      }];

      if ($$[$0-1] && $$[$0-1].length > 0)
        this.$ = this.$.concat($$[$0-1]);
    
break;
case 7:
      $$[$0-4] ? a = $$[$0-4] : a = 'NULL'
      this.$ = {
        typ: 'PROCEDURE',
        nam: $$[$0-5].val,
        arg: a,
        blc: $$[$0-2]
      }; 
    
break;
case 9:
      this.$ = {
        typ: 'CONST',
        lft: $$[$0-2].val,
        rgt: $$[$0].val
      };
    
break;
case 10:
      this.$ = [$$[$0-1]];
      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 12:
    this.$ = {
      typ: 'ID',
      val: yytext
    };
  
break;
case 13:
      this.$ = [{
        typ: 'VAR',
        val: $$[$0-1].val
      }];

      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 15:
      this.$ = [{
        typ: 'ARG',
        id_: $$[$0-2].val
      }];

      if ($$[$0-1] && $$[$0-1].length > 0)
        this.$ = this.$.concat($$[$0-1]);
    
break;
case 17:
      this.$ = [{
        typ: 'ARG',
        id_: $$[$0-1].val
      }];

      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 19:
    this.$ = {
      typ: 'NUMBER',
      val: yytext
    };
  
break;
case 20:
      this.$ = {
        typ: '=',
        id_: $$[$0-2].val,
        val: $$[$0]
      };
    
break;
case 21:
      $$[$0] ? a = $$[$0] : a = 'NULL'
      this.$ = {
        typ: 'CALL',
        prc: $$[$0-1].val,
        arg: a
      };
    
break;
case 22:
      s = [$$[$0-2]];
      if ($$[$0-1] && $$[$0-1].length > 0)
        s = s.concat($$[$0-1]);
      this.$ = [{
        typ: 'BEGIN',
        val: s
      }]; 
    
break;
case 23:
      this.$ = {
        typ: 'IFELSE',
        con: $$[$0-4],
        tru: $$[$0-2],
        fal: $$[$0]
      };
    
break;
case 24:
      this.$ = {
        typ: 'IF',
        con: $$[$0-2],
        sta: $$[$0],
      };
    
break;
case 25:
      this.$ = {
        typ: 'WHILE',
        con: $$[$0-2],
        sta: $$[$0]
      };
    
break;
case 26:
      this.$ = [$$[$0-1]];
      if ($$[$0] && $$[$0].length > 0)
        this.$ = this.$.concat($$[$0]);
    
break;
case 28: this.$ = $$[$0] 
break;
case 29: this.$ = $$[$0-1] 
break;
case 30:
      this.$ = {
        typ: 'ODD',
        val: $$[$0].val
      };
    
break;
case 31:
      this.$ = {
        typ: $$[$0-1],
        lft: $$[$0-2].val,
        rgt: $$[$0].val
      };
    
break;
case 33:
      this.$ = {
        typ: $$[$0-1],
        lft: $$[$0-2],
        rgt: $$[$0]
      };
    
break;
case 35:
      this.$ = {
        typ: $$[$0-1],
        lft: $$[$0-2],
        rgt: $$[$0]
      };
    
break;
case 38:
      this.$ = $$[$0-1];
    
break;
}
},
table: [{3:1,4:2,7:3,11:[1,4],15:[2,4],18:[2,4],23:[2,4],29:[2,4],30:[2,4],33:[2,4],37:[2,4]},{1:[3]},{5:[1,5]},{8:6,15:[1,7],18:[2,6],23:[2,6],29:[2,6],30:[2,6],33:[2,6],37:[2,6]},{12:8,16:9,23:[1,10]},{6:[1,11]},{9:12,18:[1,13],23:[2,8],29:[2,8],30:[2,8],33:[2,8],37:[2,8]},{16:14,23:[1,10]},{13:15,14:[2,11],22:[1,16]},{20:[1,17]},{5:[2,12],14:[2,12],20:[2,12],22:[2,12],24:[2,12],26:[2,12],32:[2,12],35:[2,12],36:[2,12],38:[2,12],41:[2,12],43:[2,12],45:[2,12]},{1:[2,1]},{10:18,16:19,23:[1,10],29:[1,20],30:[1,21],33:[1,22],37:[1,23]},{16:24,23:[1,10]},{14:[2,14],17:25,22:[1,26]},{14:[1,27]},{12:28,16:9,23:[1,10]},{21:29,27:[1,30]},{5:[2,2],14:[2,2]},{20:[1,31]},{16:32,23:[1,10]},{10:33,16:19,23:[1,10],29:[1,20],30:[1,21],33:[1,22],37:[1,23]},{16:42,21:41,23:[1,10],24:[1,36],27:[1,30],28:38,34:34,39:35,40:[1,37],42:39,44:40},{16:42,21:41,23:[1,10],24:[1,36],27:[1,30],28:38,34:43,39:35,40:[1,37],42:39,44:40},{14:[2,16],19:44,24:[1,45]},{14:[1,46]},{16:47,23:[1,10]},{15:[2,3],18:[2,3],23:[2,3],29:[2,3],30:[2,3],33:[2,3],37:[2,3]},{13:48,14:[2,11],22:[1,16]},{14:[2,9],22:[2,9]},{5:[2,19],14:[2,19],22:[2,19],26:[2,19],32:[2,19],35:[2,19],36:[2,19],38:[2,19],41:[2,19],43:[2,19],45:[2,19]},{16:42,21:41,23:[1,10],24:[1,50],27:[1,30],28:49,42:39,44:40},{5:[2,16],14:[2,16],19:51,24:[1,45],32:[2,16],36:[2,16]},{14:[1,53],31:52,32:[2,27]},{35:[1,54]},{35:[2,28],38:[2,28]},{16:42,21:41,23:[1,10],24:[1,50],27:[1,30],28:56,39:55,40:[1,37],42:39,44:40},{16:42,21:41,23:[1,10],24:[1,50],27:[1,30],28:57,42:39,44:40},{41:[1,58]},{5:[2,32],14:[2,32],26:[2,32],32:[2,32],35:[2,32],36:[2,32],38:[2,32],41:[2,32],43:[1,59]},{5:[2,34],14:[2,34],26:[2,34],32:[2,34],35:[2,34],36:[2,34],38:[2,34],41:[2,34],43:[2,34],45:[1,60]},{5:[2,36],14:[2,36],26:[2,36],32:[2,36],35:[2,36],36:[2,36],38:[2,36],41:[2,36],43:[2,36],45:[2,36]},{5:[2,37],14:[2,37],26:[2,37],32:[2,37],35:[2,37],36:[2,37],38:[2,37],41:[2,37],43:[2,37],45:[2,37]},{38:[1,61]},{14:[1,62]},{16:63,23:[1,10]},{18:[2,5],23:[2,5],29:[2,5],30:[2,5],33:[2,5],37:[2,5]},{14:[2,14],17:64,22:[1,26]},{14:[2,10]},{5:[2,20],14:[2,20],32:[2,20],36:[2,20]},{16:42,21:41,23:[1,10],24:[1,50],27:[1,30],28:65,42:39,44:40},{5:[2,21],14:[2,21],32:[2,21],36:[2,21]},{32:[1,66]},{10:67,16:19,23:[1,10],29:[1,20],30:[1,21],33:[1,22],37:[1,23]},{10:68,16:19,23:[1,10],29:[1,20],30:[1,21],33:[1,22],37:[1,23]},{26:[1,69]},{26:[1,70],41:[1,58]},{26:[2,30],35:[2,30],38:[2,30]},{16:42,21:41,23:[1,10],24:[1,50],27:[1,30],28:71,42:39,44:40},{16:42,21:41,23:[1,10],24:[1,50],27:[1,30],28:72,42:39,44:40},{16:42,21:41,23:[1,10],24:[1,50],27:[1,30],42:73,44:40},{10:74,16:19,23:[1,10],29:[1,20],30:[1,21],33:[1,22],37:[1,23]},{4:75,7:3,11:[1,4],15:[2,4],18:[2,4],23:[2,4],29:[2,4],30:[2,4],33:[2,4],37:[2,4]},{22:[1,77],25:76,26:[2,18]},{14:[2,13]},{26:[1,70]},{5:[2,22],14:[2,22],32:[2,22],36:[2,22]},{14:[1,53],31:78,32:[2,27]},{5:[2,24],14:[2,24],32:[2,24],36:[1,79]},{35:[2,29],38:[2,29]},{5:[2,38],14:[2,38],26:[2,38],32:[2,38],35:[2,38],36:[2,38],38:[2,38],41:[2,38],43:[2,38],45:[2,38]},{26:[2,31],35:[2,31],38:[2,31]},{5:[2,33],14:[2,33],26:[2,33],32:[2,33],35:[2,33],36:[2,33],38:[2,33],41:[2,33]},{5:[2,35],14:[2,35],26:[2,35],32:[2,35],35:[2,35],36:[2,35],38:[2,35],41:[2,35],43:[2,35]},{5:[2,25],14:[2,25],32:[2,25],36:[2,25]},{14:[1,80]},{26:[1,81]},{16:82,23:[1,10]},{32:[2,26]},{10:83,16:19,23:[1,10],29:[1,20],30:[1,21],33:[1,22],37:[1,23]},{9:84,18:[1,13],23:[2,8],29:[2,8],30:[2,8],33:[2,8],37:[2,8]},{5:[2,15],14:[2,15],32:[2,15],36:[2,15]},{22:[1,77],25:85,26:[2,18]},{5:[2,23],14:[2,23],32:[2,23],36:[2,23]},{23:[2,7],29:[2,7],30:[2,7],33:[2,7],37:[2,7]},{26:[2,17]}],
defaultActions: {11:[2,1],48:[2,10],64:[2,13],78:[2,26],85:[2,17]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

var symbol_table = {};

function fact (n) { 
  return n==0 ? 1 : fact(n-1) * n 
}

/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var reserved_words ={ 
	IF			: 'IF', 
	THEN 		: 'THEN',
	ELSE 		: 'ELSE', 
	WHILE  		: 'WHILE', 
	DO       	: 'DO',  
	BEGIN     	: 'BEGIN',
	END        	: 'END',
	CALL        : 'CALL',
	CONST       : 'CONST',
	VAR        	: 'VAR',
	PROCEDURE  	: 'PROCEDURE',
	ODD        	: 'ODD'
}

function idORrw(x) {
  return (x.toUpperCase() in reserved_words)? x.toUpperCase() : 'ID'
}


var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace and comments */
break;
case 1:return 20
break;
case 2:return 43	// Comentar esto
break;
case 3:return 45		// Comentar esto
break;
case 4:return 24
break;
case 5:return 26
break;
case 6:return 5
break;
case 7:return 22
break;
case 8:return 14
break;
case 9:return 41
break;
case 10:return 41
break;
case 11:return idORrw(yy_.yytext)
break;
case 12:return 27
break;
case 13:return 6
break;
case 14:return 'INVALID'
break;
}
},
rules: [/^(?:\s+|#.*)/,/^(?:=)/,/^(?:[+-])/,/^(?:[*/])/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?:,)/,/^(?:;)/,/^(?:[<>=!][=])/,/^(?:[<>])/,/^(?:\b[A-Za-z_]\w*\b)/,/^(?:\b[0-9]+\b)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = calculator;
exports.Parser = calculator.Parser;
exports.parse = function () { return calculator.parse.apply(calculator, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}